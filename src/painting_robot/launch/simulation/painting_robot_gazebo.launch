<?xml version="1.0" ?>
<launch>

<!-- MIR100 -->
<!-- =========================================================================== -->

  <arg name="gui" default="true" />
  <arg name="paused" default="false" doc="Starts gazebo in paused mode" />
  <arg name="world_name" default="worlds/empty.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable, but can also be an absolute path -->
  <arg name="limited" default="false"  doc="If true, limits joint range [-PI, PI] on all joints." />
  <arg name="robot_x"   default="0.0" />
  <arg name="robot_y"   default="0.0" />
  <arg name="robot_yaw" default="0.0" />

  <arg name="tf_prefix" default="" doc="tf_prefix to be used by gazebo plugins and in the robot's urdf etc." />

  <arg name="namespace" default="$(arg tf_prefix)" doc="Namespace to push all topics into."/>

  <!--group if="$(eval namespace != '')">
    <group>
      <remap from="$(arg namespace)/joint_states"                   to="$(arg namespace)/mir/joint_states" />
      <remap from="$(arg namespace)/mobile_base_controller/cmd_vel" to="$(arg namespace)/cmd_vel" />
      <remap from="$(arg namespace)/mobile_base_controller/odom"    to="$(arg namespace)/odom" />

      <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="paused" value="true" />
        <arg name="gui" value="$(arg gui)" />
      </include>
    </group>

    <group ns="$(arg namespace)"-->
      <!-- spawn robot and bring up controllers etc. -->
      <!--include file="$(find painting_robot)/launch/simulation/painting_robot_gazebo_common.launch">
        <arg name="robot_x"   value="$(arg robot_x)" />
        <arg name="robot_y"   value="$(arg robot_y)" />
        <arg name="robot_yaw" value="$(arg robot_yaw)" />
        <arg name="tf_prefix" value="$(arg tf_prefix)" />
      </include>
    </group>
  </group-->

  <!-- Duplicate of the above in case namespace is empty. This is necessary to
       avoid the "<group> tag has an empty 'ns' attribute" parsing error. -->
  <group unless="$(eval namespace != '')">
    <group>
      <remap from="joint_states"                   to="mir/joint_states" />
      <remap from="mobile_base_controller/cmd_vel" to="cmd_vel" />
      <remap from="mobile_base_controller/odom"    to="odom" />

      <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="paused" value="false" />
        <arg name="gui" value="$(arg gui)" />
      </include>
    </group>

    <!-- spawn robot and bring up controllers etc. -->
    <include file="$(find painting_robot)/launch/simulation/painting_robot_gazebo_common.launch">
      <arg name="robot_x"   value="$(arg robot_x)" />
      <arg name="robot_y"   value="$(arg robot_y)" />
      <arg name="robot_yaw" value="$(arg robot_yaw)" />
      <arg name="tf_prefix" value="$(arg tf_prefix)" />
    </include>
  </group>
  
  <!-- =========================================================================== -->
  
  
  <!-- UR10 -->
  <!-- =========================================================================== -->
  

  
  <!-- startup simulated world -->
  <!--include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="worlds/empty.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include-->

  <!-- send robot urdf to param server -->
  <!--include file="$(find painting_robot)/launch/visualization/components/ur10_upload.launch">
    <arg name="limited" value="$(arg limited)"/>
  </include-->

  <!-- push robot_description to factory and spawn robot in gazebo -->
  <!--node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot -z 0.1" respawn="false" output="screen" /-->

  <include file="$(find painting_robot)/launch/simulation/controller_utils.launch"/>

  <!-- start this controller -->
  <rosparam file="$(find painting_robot)/controller/arm_controller_ur10.yaml" command="load"/>
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>

  <!-- load other controllers -->
  <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="load joint_group_position_controller" />
  
</launch>
